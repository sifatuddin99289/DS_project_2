// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.27.1
// source: proto/telemetry.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ---- Original telemetry messages/services ----
type SensorReading struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorId      string                 `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	TsUnixMs      int64                  `protobuf:"varint,2,opt,name=ts_unix_ms,json=tsUnixMs,proto3" json:"ts_unix_ms,omitempty"`
	Site          string                 `protobuf:"bytes,3,opt,name=site,proto3" json:"site,omitempty"`
	Temperature   float64                `protobuf:"fixed64,4,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Humidity      float64                `protobuf:"fixed64,5,opt,name=humidity,proto3" json:"humidity,omitempty"`
	Seq           uint64                 `protobuf:"varint,6,opt,name=seq,proto3" json:"seq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorReading) Reset() {
	*x = SensorReading{}
	mi := &file_proto_telemetry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorReading) ProtoMessage() {}

func (x *SensorReading) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorReading.ProtoReflect.Descriptor instead.
func (*SensorReading) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *SensorReading) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *SensorReading) GetTsUnixMs() int64 {
	if x != nil {
		return x.TsUnixMs
	}
	return 0
}

func (x *SensorReading) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *SensorReading) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *SensorReading) GetHumidity() float64 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

func (x *SensorReading) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type IngestAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastSeq       uint64                 `protobuf:"varint,1,opt,name=last_seq,json=lastSeq,proto3" json:"last_seq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestAck) Reset() {
	*x = IngestAck{}
	mi := &file_proto_telemetry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestAck) ProtoMessage() {}

func (x *IngestAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestAck.ProtoReflect.Descriptor instead.
func (*IngestAck) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *IngestAck) GetLastSeq() uint64 {
	if x != nil {
		return x.LastSeq
	}
	return 0
}

type QueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorId      string                 `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	StartMs       int64                  `protobuf:"varint,2,opt,name=start_ms,json=startMs,proto3" json:"start_ms,omitempty"`
	EndMs         int64                  `protobuf:"varint,3,opt,name=end_ms,json=endMs,proto3" json:"end_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_proto_telemetry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *QueryRequest) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *QueryRequest) GetStartMs() int64 {
	if x != nil {
		return x.StartMs
	}
	return 0
}

func (x *QueryRequest) GetEndMs() int64 {
	if x != nil {
		return x.EndMs
	}
	return 0
}

type QueryPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TsUnixMs      int64                  `protobuf:"varint,1,opt,name=ts_unix_ms,json=tsUnixMs,proto3" json:"ts_unix_ms,omitempty"`
	Temperature   float64                `protobuf:"fixed64,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Humidity      float64                `protobuf:"fixed64,3,opt,name=humidity,proto3" json:"humidity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPoint) Reset() {
	*x = QueryPoint{}
	mi := &file_proto_telemetry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPoint) ProtoMessage() {}

func (x *QueryPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPoint.ProtoReflect.Descriptor instead.
func (*QueryPoint) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *QueryPoint) GetTsUnixMs() int64 {
	if x != nil {
		return x.TsUnixMs
	}
	return 0
}

func (x *QueryPoint) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *QueryPoint) GetHumidity() float64 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

type QueryReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Points        []*QueryPoint          `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryReply) Reset() {
	*x = QueryReply{}
	mi := &file_proto_telemetry_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReply) ProtoMessage() {}

func (x *QueryReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReply.ProtoReflect.Descriptor instead.
func (*QueryReply) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *QueryReply) GetPoints() []*QueryPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

// ---- New: Aggregator (server-stream metrics) ----
type MetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorId      string                 `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	Site          string                 `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricsRequest) Reset() {
	*x = MetricsRequest{}
	mi := &file_proto_telemetry_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsRequest) ProtoMessage() {}

func (x *MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsRequest.ProtoReflect.Descriptor instead.
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *MetricsRequest) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *MetricsRequest) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

type Metric struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorId      string                 `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	Site          string                 `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
	WindowMs      int64                  `protobuf:"varint,3,opt,name=window_ms,json=windowMs,proto3" json:"window_ms,omitempty"`
	AvgTemp       float64                `protobuf:"fixed64,4,opt,name=avg_temp,json=avgTemp,proto3" json:"avg_temp,omitempty"`
	AvgHumidity   float64                `protobuf:"fixed64,5,opt,name=avg_humidity,json=avgHumidity,proto3" json:"avg_humidity,omitempty"`
	TsUnixMs      int64                  `protobuf:"varint,6,opt,name=ts_unix_ms,json=tsUnixMs,proto3" json:"ts_unix_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metric) Reset() {
	*x = Metric{}
	mi := &file_proto_telemetry_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{6}
}

func (x *Metric) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *Metric) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *Metric) GetWindowMs() int64 {
	if x != nil {
		return x.WindowMs
	}
	return 0
}

func (x *Metric) GetAvgTemp() float64 {
	if x != nil {
		return x.AvgTemp
	}
	return 0
}

func (x *Metric) GetAvgHumidity() float64 {
	if x != nil {
		return x.AvgHumidity
	}
	return 0
}

func (x *Metric) GetTsUnixMs() int64 {
	if x != nil {
		return x.TsUnixMs
	}
	return 0
}

// ---- New: Alerter (server-stream alerts) ----
type AlertRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorId      string                 `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	Site          string                 `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlertRequest) Reset() {
	*x = AlertRequest{}
	mi := &file_proto_telemetry_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertRequest) ProtoMessage() {}

func (x *AlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertRequest.ProtoReflect.Descriptor instead.
func (*AlertRequest) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *AlertRequest) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *AlertRequest) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

type Alert struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorId      string                 `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	Site          string                 `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"` // e.g., TEMP_HIGH
	Value         float64                `protobuf:"fixed64,4,opt,name=value,proto3" json:"value,omitempty"`
	Threshold     float64                `protobuf:"fixed64,5,opt,name=threshold,proto3" json:"threshold,omitempty"`
	TsUnixMs      int64                  `protobuf:"varint,6,opt,name=ts_unix_ms,json=tsUnixMs,proto3" json:"ts_unix_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Alert) Reset() {
	*x = Alert{}
	mi := &file_proto_telemetry_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{8}
}

func (x *Alert) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *Alert) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *Alert) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Alert) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Alert) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Alert) GetTsUnixMs() int64 {
	if x != nil {
		return x.TsUnixMs
	}
	return 0
}

var File_proto_telemetry_proto protoreflect.FileDescriptor

const file_proto_telemetry_proto_rawDesc = "" +
	"\n" +
	"\x15proto/telemetry.proto\x12\ttelemetry\"\xae\x01\n" +
	"\rSensorReading\x12\x1b\n" +
	"\tsensor_id\x18\x01 \x01(\tR\bsensorId\x12\x1c\n" +
	"\n" +
	"ts_unix_ms\x18\x02 \x01(\x03R\btsUnixMs\x12\x12\n" +
	"\x04site\x18\x03 \x01(\tR\x04site\x12 \n" +
	"\vtemperature\x18\x04 \x01(\x01R\vtemperature\x12\x1a\n" +
	"\bhumidity\x18\x05 \x01(\x01R\bhumidity\x12\x10\n" +
	"\x03seq\x18\x06 \x01(\x04R\x03seq\"&\n" +
	"\tIngestAck\x12\x19\n" +
	"\blast_seq\x18\x01 \x01(\x04R\alastSeq\"]\n" +
	"\fQueryRequest\x12\x1b\n" +
	"\tsensor_id\x18\x01 \x01(\tR\bsensorId\x12\x19\n" +
	"\bstart_ms\x18\x02 \x01(\x03R\astartMs\x12\x15\n" +
	"\x06end_ms\x18\x03 \x01(\x03R\x05endMs\"h\n" +
	"\n" +
	"QueryPoint\x12\x1c\n" +
	"\n" +
	"ts_unix_ms\x18\x01 \x01(\x03R\btsUnixMs\x12 \n" +
	"\vtemperature\x18\x02 \x01(\x01R\vtemperature\x12\x1a\n" +
	"\bhumidity\x18\x03 \x01(\x01R\bhumidity\";\n" +
	"\n" +
	"QueryReply\x12-\n" +
	"\x06points\x18\x01 \x03(\v2\x15.telemetry.QueryPointR\x06points\"A\n" +
	"\x0eMetricsRequest\x12\x1b\n" +
	"\tsensor_id\x18\x01 \x01(\tR\bsensorId\x12\x12\n" +
	"\x04site\x18\x02 \x01(\tR\x04site\"\xb2\x01\n" +
	"\x06Metric\x12\x1b\n" +
	"\tsensor_id\x18\x01 \x01(\tR\bsensorId\x12\x12\n" +
	"\x04site\x18\x02 \x01(\tR\x04site\x12\x1b\n" +
	"\twindow_ms\x18\x03 \x01(\x03R\bwindowMs\x12\x19\n" +
	"\bavg_temp\x18\x04 \x01(\x01R\aavgTemp\x12!\n" +
	"\favg_humidity\x18\x05 \x01(\x01R\vavgHumidity\x12\x1c\n" +
	"\n" +
	"ts_unix_ms\x18\x06 \x01(\x03R\btsUnixMs\"?\n" +
	"\fAlertRequest\x12\x1b\n" +
	"\tsensor_id\x18\x01 \x01(\tR\bsensorId\x12\x12\n" +
	"\x04site\x18\x02 \x01(\tR\x04site\"\xa2\x01\n" +
	"\x05Alert\x12\x1b\n" +
	"\tsensor_id\x18\x01 \x01(\tR\bsensorId\x12\x12\n" +
	"\x04site\x18\x02 \x01(\tR\x04site\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\x12\x14\n" +
	"\x05value\x18\x04 \x01(\x01R\x05value\x12\x1c\n" +
	"\tthreshold\x18\x05 \x01(\x01R\tthreshold\x12\x1c\n" +
	"\n" +
	"ts_unix_ms\x18\x06 \x01(\x03R\btsUnixMs2O\n" +
	"\tIngestion\x12B\n" +
	"\x0eStreamReadings\x12\x18.telemetry.SensorReading\x1a\x14.telemetry.IngestAck(\x012C\n" +
	"\bQueryAPI\x127\n" +
	"\x05Range\x12\x17.telemetry.QueryRequest\x1a\x15.telemetry.QueryReply2P\n" +
	"\n" +
	"Aggregator\x12B\n" +
	"\x10SubscribeMetrics\x12\x19.telemetry.MetricsRequest\x1a\x11.telemetry.Metric0\x012I\n" +
	"\aAlerter\x12>\n" +
	"\x0fSubscribeAlerts\x12\x17.telemetry.AlertRequest\x1a\x10.telemetry.Alert0\x01B9Z7github.com/Abdullah007noman/My-Distributed-System/protob\x06proto3"

var (
	file_proto_telemetry_proto_rawDescOnce sync.Once
	file_proto_telemetry_proto_rawDescData []byte
)

func file_proto_telemetry_proto_rawDescGZIP() []byte {
	file_proto_telemetry_proto_rawDescOnce.Do(func() {
		file_proto_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_telemetry_proto_rawDesc), len(file_proto_telemetry_proto_rawDesc)))
	})
	return file_proto_telemetry_proto_rawDescData
}

var file_proto_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_telemetry_proto_goTypes = []any{
	(*SensorReading)(nil),  // 0: telemetry.SensorReading
	(*IngestAck)(nil),      // 1: telemetry.IngestAck
	(*QueryRequest)(nil),   // 2: telemetry.QueryRequest
	(*QueryPoint)(nil),     // 3: telemetry.QueryPoint
	(*QueryReply)(nil),     // 4: telemetry.QueryReply
	(*MetricsRequest)(nil), // 5: telemetry.MetricsRequest
	(*Metric)(nil),         // 6: telemetry.Metric
	(*AlertRequest)(nil),   // 7: telemetry.AlertRequest
	(*Alert)(nil),          // 8: telemetry.Alert
}
var file_proto_telemetry_proto_depIdxs = []int32{
	3, // 0: telemetry.QueryReply.points:type_name -> telemetry.QueryPoint
	0, // 1: telemetry.Ingestion.StreamReadings:input_type -> telemetry.SensorReading
	2, // 2: telemetry.QueryAPI.Range:input_type -> telemetry.QueryRequest
	5, // 3: telemetry.Aggregator.SubscribeMetrics:input_type -> telemetry.MetricsRequest
	7, // 4: telemetry.Alerter.SubscribeAlerts:input_type -> telemetry.AlertRequest
	1, // 5: telemetry.Ingestion.StreamReadings:output_type -> telemetry.IngestAck
	4, // 6: telemetry.QueryAPI.Range:output_type -> telemetry.QueryReply
	6, // 7: telemetry.Aggregator.SubscribeMetrics:output_type -> telemetry.Metric
	8, // 8: telemetry.Alerter.SubscribeAlerts:output_type -> telemetry.Alert
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_telemetry_proto_init() }
func file_proto_telemetry_proto_init() {
	if File_proto_telemetry_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_telemetry_proto_rawDesc), len(file_proto_telemetry_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_proto_telemetry_proto_goTypes,
		DependencyIndexes: file_proto_telemetry_proto_depIdxs,
		MessageInfos:      file_proto_telemetry_proto_msgTypes,
	}.Build()
	File_proto_telemetry_proto = out.File
	file_proto_telemetry_proto_goTypes = nil
	file_proto_telemetry_proto_depIdxs = nil
}
