// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: proto/telemetry.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ingestion_StreamReadings_FullMethodName = "/telemetry.Ingestion/StreamReadings"
)

// IngestionClient is the client API for Ingestion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngestionClient interface {
	StreamReadings(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SensorReading, IngestAck], error)
}

type ingestionClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestionClient(cc grpc.ClientConnInterface) IngestionClient {
	return &ingestionClient{cc}
}

func (c *ingestionClient) StreamReadings(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SensorReading, IngestAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Ingestion_ServiceDesc.Streams[0], Ingestion_StreamReadings_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SensorReading, IngestAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Ingestion_StreamReadingsClient = grpc.ClientStreamingClient[SensorReading, IngestAck]

// IngestionServer is the server API for Ingestion service.
// All implementations must embed UnimplementedIngestionServer
// for forward compatibility.
type IngestionServer interface {
	StreamReadings(grpc.ClientStreamingServer[SensorReading, IngestAck]) error
	mustEmbedUnimplementedIngestionServer()
}

// UnimplementedIngestionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngestionServer struct{}

func (UnimplementedIngestionServer) StreamReadings(grpc.ClientStreamingServer[SensorReading, IngestAck]) error {
	return status.Errorf(codes.Unimplemented, "method StreamReadings not implemented")
}
func (UnimplementedIngestionServer) mustEmbedUnimplementedIngestionServer() {}
func (UnimplementedIngestionServer) testEmbeddedByValue()                   {}

// UnsafeIngestionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestionServer will
// result in compilation errors.
type UnsafeIngestionServer interface {
	mustEmbedUnimplementedIngestionServer()
}

func RegisterIngestionServer(s grpc.ServiceRegistrar, srv IngestionServer) {
	// If the following call pancis, it indicates UnimplementedIngestionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ingestion_ServiceDesc, srv)
}

func _Ingestion_StreamReadings_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestionServer).StreamReadings(&grpc.GenericServerStream[SensorReading, IngestAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Ingestion_StreamReadingsServer = grpc.ClientStreamingServer[SensorReading, IngestAck]

// Ingestion_ServiceDesc is the grpc.ServiceDesc for Ingestion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ingestion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.Ingestion",
	HandlerType: (*IngestionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReadings",
			Handler:       _Ingestion_StreamReadings_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/telemetry.proto",
}

const (
	QueryAPI_Range_FullMethodName = "/telemetry.QueryAPI/Range"
)

// QueryAPIClient is the client API for QueryAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryAPIClient interface {
	Range(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
}

type queryAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryAPIClient(cc grpc.ClientConnInterface) QueryAPIClient {
	return &queryAPIClient{cc}
}

func (c *queryAPIClient) Range(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, QueryAPI_Range_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryAPIServer is the server API for QueryAPI service.
// All implementations must embed UnimplementedQueryAPIServer
// for forward compatibility.
type QueryAPIServer interface {
	Range(context.Context, *QueryRequest) (*QueryReply, error)
	mustEmbedUnimplementedQueryAPIServer()
}

// UnimplementedQueryAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryAPIServer struct{}

func (UnimplementedQueryAPIServer) Range(context.Context, *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Range not implemented")
}
func (UnimplementedQueryAPIServer) mustEmbedUnimplementedQueryAPIServer() {}
func (UnimplementedQueryAPIServer) testEmbeddedByValue()                  {}

// UnsafeQueryAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryAPIServer will
// result in compilation errors.
type UnsafeQueryAPIServer interface {
	mustEmbedUnimplementedQueryAPIServer()
}

func RegisterQueryAPIServer(s grpc.ServiceRegistrar, srv QueryAPIServer) {
	// If the following call pancis, it indicates UnimplementedQueryAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueryAPI_ServiceDesc, srv)
}

func _QueryAPI_Range_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAPIServer).Range(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAPI_Range_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAPIServer).Range(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryAPI_ServiceDesc is the grpc.ServiceDesc for QueryAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.QueryAPI",
	HandlerType: (*QueryAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Range",
			Handler:    _QueryAPI_Range_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/telemetry.proto",
}

const (
	Aggregator_SubscribeMetrics_FullMethodName = "/telemetry.Aggregator/SubscribeMetrics"
)

// AggregatorClient is the client API for Aggregator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregatorClient interface {
	SubscribeMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Metric], error)
}

type aggregatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorClient(cc grpc.ClientConnInterface) AggregatorClient {
	return &aggregatorClient{cc}
}

func (c *aggregatorClient) SubscribeMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Metric], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Aggregator_ServiceDesc.Streams[0], Aggregator_SubscribeMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MetricsRequest, Metric]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Aggregator_SubscribeMetricsClient = grpc.ServerStreamingClient[Metric]

// AggregatorServer is the server API for Aggregator service.
// All implementations must embed UnimplementedAggregatorServer
// for forward compatibility.
type AggregatorServer interface {
	SubscribeMetrics(*MetricsRequest, grpc.ServerStreamingServer[Metric]) error
	mustEmbedUnimplementedAggregatorServer()
}

// UnimplementedAggregatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggregatorServer struct{}

func (UnimplementedAggregatorServer) SubscribeMetrics(*MetricsRequest, grpc.ServerStreamingServer[Metric]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMetrics not implemented")
}
func (UnimplementedAggregatorServer) mustEmbedUnimplementedAggregatorServer() {}
func (UnimplementedAggregatorServer) testEmbeddedByValue()                    {}

// UnsafeAggregatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregatorServer will
// result in compilation errors.
type UnsafeAggregatorServer interface {
	mustEmbedUnimplementedAggregatorServer()
}

func RegisterAggregatorServer(s grpc.ServiceRegistrar, srv AggregatorServer) {
	// If the following call pancis, it indicates UnimplementedAggregatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Aggregator_ServiceDesc, srv)
}

func _Aggregator_SubscribeMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AggregatorServer).SubscribeMetrics(m, &grpc.GenericServerStream[MetricsRequest, Metric]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Aggregator_SubscribeMetricsServer = grpc.ServerStreamingServer[Metric]

// Aggregator_ServiceDesc is the grpc.ServiceDesc for Aggregator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aggregator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.Aggregator",
	HandlerType: (*AggregatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeMetrics",
			Handler:       _Aggregator_SubscribeMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/telemetry.proto",
}

const (
	Alerter_SubscribeAlerts_FullMethodName = "/telemetry.Alerter/SubscribeAlerts"
)

// AlerterClient is the client API for Alerter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlerterClient interface {
	SubscribeAlerts(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Alert], error)
}

type alerterClient struct {
	cc grpc.ClientConnInterface
}

func NewAlerterClient(cc grpc.ClientConnInterface) AlerterClient {
	return &alerterClient{cc}
}

func (c *alerterClient) SubscribeAlerts(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Alert], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Alerter_ServiceDesc.Streams[0], Alerter_SubscribeAlerts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AlertRequest, Alert]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Alerter_SubscribeAlertsClient = grpc.ServerStreamingClient[Alert]

// AlerterServer is the server API for Alerter service.
// All implementations must embed UnimplementedAlerterServer
// for forward compatibility.
type AlerterServer interface {
	SubscribeAlerts(*AlertRequest, grpc.ServerStreamingServer[Alert]) error
	mustEmbedUnimplementedAlerterServer()
}

// UnimplementedAlerterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAlerterServer struct{}

func (UnimplementedAlerterServer) SubscribeAlerts(*AlertRequest, grpc.ServerStreamingServer[Alert]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAlerts not implemented")
}
func (UnimplementedAlerterServer) mustEmbedUnimplementedAlerterServer() {}
func (UnimplementedAlerterServer) testEmbeddedByValue()                 {}

// UnsafeAlerterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlerterServer will
// result in compilation errors.
type UnsafeAlerterServer interface {
	mustEmbedUnimplementedAlerterServer()
}

func RegisterAlerterServer(s grpc.ServiceRegistrar, srv AlerterServer) {
	// If the following call pancis, it indicates UnimplementedAlerterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Alerter_ServiceDesc, srv)
}

func _Alerter_SubscribeAlerts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AlertRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlerterServer).SubscribeAlerts(m, &grpc.GenericServerStream[AlertRequest, Alert]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Alerter_SubscribeAlertsServer = grpc.ServerStreamingServer[Alert]

// Alerter_ServiceDesc is the grpc.ServiceDesc for Alerter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Alerter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.Alerter",
	HandlerType: (*AlerterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeAlerts",
			Handler:       _Alerter_SubscribeAlerts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/telemetry.proto",
}
