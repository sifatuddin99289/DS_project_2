# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from proto import telemetry_pb2 as telemetry__pb2

GRPC_GENERATED_VERSION = '1.66.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in telemetry_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class IngestionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamReadings = channel.stream_unary(
                '/telemetry.Ingestion/StreamReadings',
                request_serializer=telemetry__pb2.SensorReading.SerializeToString,
                response_deserializer=telemetry__pb2.IngestAck.FromString,
                _registered_method=True)


class IngestionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamReadings(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IngestionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamReadings': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamReadings,
                    request_deserializer=telemetry__pb2.SensorReading.FromString,
                    response_serializer=telemetry__pb2.IngestAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'telemetry.Ingestion', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('telemetry.Ingestion', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Ingestion(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamReadings(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/telemetry.Ingestion/StreamReadings',
            telemetry__pb2.SensorReading.SerializeToString,
            telemetry__pb2.IngestAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class QueryAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Range = channel.unary_unary(
                '/telemetry.QueryAPI/Range',
                request_serializer=telemetry__pb2.QueryRequest.SerializeToString,
                response_deserializer=telemetry__pb2.QueryReply.FromString,
                _registered_method=True)


class QueryAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Range(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Range': grpc.unary_unary_rpc_method_handler(
                    servicer.Range,
                    request_deserializer=telemetry__pb2.QueryRequest.FromString,
                    response_serializer=telemetry__pb2.QueryReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'telemetry.QueryAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('telemetry.QueryAPI', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class QueryAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Range(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/telemetry.QueryAPI/Range',
            telemetry__pb2.QueryRequest.SerializeToString,
            telemetry__pb2.QueryReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AggregatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeMetrics = channel.unary_stream(
                '/telemetry.Aggregator/SubscribeMetrics',
                request_serializer=telemetry__pb2.MetricsRequest.SerializeToString,
                response_deserializer=telemetry__pb2.Metric.FromString,
                _registered_method=True)


class AggregatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubscribeMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AggregatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeMetrics': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeMetrics,
                    request_deserializer=telemetry__pb2.MetricsRequest.FromString,
                    response_serializer=telemetry__pb2.Metric.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'telemetry.Aggregator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('telemetry.Aggregator', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Aggregator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubscribeMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/telemetry.Aggregator/SubscribeMetrics',
            telemetry__pb2.MetricsRequest.SerializeToString,
            telemetry__pb2.Metric.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AlerterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeAlerts = channel.unary_stream(
                '/telemetry.Alerter/SubscribeAlerts',
                request_serializer=telemetry__pb2.AlertRequest.SerializeToString,
                response_deserializer=telemetry__pb2.Alert.FromString,
                _registered_method=True)


class AlerterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubscribeAlerts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AlerterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeAlerts': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeAlerts,
                    request_deserializer=telemetry__pb2.AlertRequest.FromString,
                    response_serializer=telemetry__pb2.Alert.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'telemetry.Alerter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('telemetry.Alerter', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Alerter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubscribeAlerts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/telemetry.Alerter/SubscribeAlerts',
            telemetry__pb2.AlertRequest.SerializeToString,
            telemetry__pb2.Alert.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
